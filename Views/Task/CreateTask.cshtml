@using Exernet;
@model Exernet.Models.ExernetTaskViewModel
@{
    ViewBag.Title = "Create New Task";
}
@Scripts.Render("~/bundles/markdownjs")
@Styles.Render("~/Content/markdown")


<head>
    <meta charset="utf-8">
    <title>Create task</title>
    <script src="~/Scripts/myJava.js"></script>
    <script src="~/Scripts/add-more-pictures.js"></script>
</head>

<h2>Post Task</h2>
<div class="row">
    <div class="col-lg-6">

        @using (Html.BeginForm("CreateTask", "Task", new { ReturnUrl = "/Home/Index" }, FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form" }))
        {
            @Html.ValidationSummary()
            <div class="bs-component">
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Title, new { @class = "form-control", placeholder = "Title?" })
                </div>

                <div class="row">
                    <div class="col-md-9">
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.Tags, new { @class = "form-control", id = "tags", placeholder = "Tags?" })
                        </div>
                    </div>
                    <div class="col-md-3" align="right">
                        <div class="form-group">
                            @Html.DropDownListFor(m => m.Category, new SelectList(
                                                new List<Object>{
                                                new{ value = Resources.Category.Math, text = Resources.Category.Math},
                                                new{ value = Resources.Category.Cult, text = Resources.Category.Cult},
                                                new{ value = Resources.Category.Geography, text = Resources.Category.Geography},
                                                new{ value = Resources.Category.Physics, text = Resources.Category.Physics},
                                                new{ value = Resources.Category.Chemistry, text = Resources.Category.Chemistry},
                                                new{ value = Resources.Category.WithoutCategory, text = Resources.Category.WithoutCategory}

                            }, "value", "text", Resources.Category.WithoutCategory), new { @class = "form-control" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.TextAreaFor(m => m.Text, new { data_provide = "markdown", rows = "10" })
                </div>

                <div class="form-group">
                    @Html.TextBoxFor(m => m.Answers, new { @class = "form-control", placeholder = "Answers?" })
                </div>

                @*<div class="form-group">
                        <input type="file" name="Images[0]" id="Images" />
                    </div>*@

                <div class="form-group">
                    <label for="inputs" class="control-label">Add images</label>
                </div>
                    <table id="inputs"></table>
                <div class="form-group">
                    <input type="button" class="btn btn-xs btn-default" value="Add one more image" onclick="addInput()">
                </div>

                <div class="form-group">
                    @Html.TextBoxFor(m => m.Videos, new { @class = "form-control", placeholder = "Videos links like http://www.youtube.com/embed/WIH79zPH7L0, http://www.youtube.com/embed/WIH79zPH9k0 ?" })
                </div>

                <div class="form-group">
                    <input type="submit" value="Submit" class="btn btn-success" />
                </div>
            </div>




        }

    </div>
    <div class="col-lg-6">
        @{ Html.RenderPartial("Formula"); }
    </div>

</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
